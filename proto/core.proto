syntax = "proto3";
package core;

service CoreApi {
    // streams
    rpc Throughputs (ThroughputsRequest) returns (stream ThroughputsEvent) {
    }
    rpc GetSession (GetSessionRequest) returns (GetSessionResponse) {
    }
}

message ThroughputsRequest {
    int32 session_id = 1;
}

message ThroughputsEvent {
    int32 session_id = 1;
    repeated BridgeThroughput bridge_throughputs = 2;
    repeated InterfaceThroughput iface_throughputs = 3;
}

message BridgeThroughput {
    int32 node_id = 1;
    double throughput = 2;
}

message InterfaceThroughput {
    int32 node_id = 1;
    int32 iface_id = 2;
    double throughput = 3;
}

message GetSessionResponse {
    Session session = 1;
}

message GetSessionRequest {
    int32 session_id = 1;
}

message Session {
    int32 id = 1;
    SessionState.Enum state = 2;
    repeated Node nodes = 3;
    repeated Link links = 4;
    string dir = 5;
    string user = 6;
    repeated ServiceDefaults default_services = 7;
    SessionLocation location = 8;
    repeated Hook hooks = 9;
    map<string, string> metadata = 10;
    string file = 11;
    map<string, ConfigOption> options = 12;
    repeated Server servers = 13;
}


message ServiceDefaults {
    string model = 1;
    repeated string services = 2;
}

message SessionLocation {
    float x = 1;
    float y = 2;
    float z = 3;
    float lat = 4;
    float lon = 5;
    float alt = 6;
    float scale = 7;
}

message Hook {
    SessionState.Enum state = 1;
    string file = 2;
    string data = 3;
}

message SessionState {
    enum Enum {
        NONE = 0;
        DEFINITION = 1;
        CONFIGURATION = 2;
        INSTANTIATION = 3;
        RUNTIME = 4;
        DATACOLLECT = 5;
        SHUTDOWN = 6;
    }
}


message Node {
    int32 id = 1;
    string name = 2;
    NodeType.Enum type = 3;
    string model = 4;
    Position position = 5;
    string emane = 6;
    string icon = 7;
    string image = 8;
    string server = 9;
    repeated string services = 10;
    Geo geo = 11;
    string dir = 12;
    string channel = 13;
    int32 canvas = 14;
    map<string, ConfigOption> wlan_config = 15;
    map<string, ConfigOption> mobility_config = 16;
    map<string, ServiceConfig> service_configs = 17;
    repeated NodeEmaneConfig emane_configs = 18;
    map<string, ConfigOption> wireless_config = 19;
    string compose = 20;
    string compose_name = 21;
}


message Link {
    int32 node1_id = 1;
    int32 node2_id = 2;
    LinkType.Enum type = 3;
    Interface iface1 = 4;
    Interface iface2 = 5;
    LinkOptions options = 6;
    int32 network_id = 7;
    string label = 8;
    string color = 9;
}

message LinkOptions {
    int64 jitter = 1;
    int32 key = 2;
    int32 mburst = 3;
    int32 mer = 4;
    float loss = 5;
    int64 bandwidth = 6;
    int32 burst = 7;
    int64 delay = 8;
    int32 dup = 9;
    bool unidirectional = 10;
    int32 buffer = 11;
}

message Interface {
    int32 id = 1;
    string name = 2;
    string mac = 3;
    string ip4 = 4;
    int32 ip4_mask = 5;
    string ip6 = 6;
    int32 ip6_mask = 7;
    int32 net_id = 8;
    int32 flow_id = 9;
    int32 mtu = 10;
    int32 node_id = 11;
    int32 net2_id = 12;
    int32 nem_id = 13;
    int32 nem_port = 14;
}

message LinkType {
    enum Enum {
        WIRELESS = 0;
        WIRED = 1;
    }
}

message NodeEmaneConfig {
    int32 iface_id = 1;
    string model = 2;
    map<string, ConfigOption> config = 3;
}

message ConfigOption {
    string label = 1;
    string name = 2;
    string value = 3;
    int32 type = 4;
    repeated string select = 5;
    string group = 6;
    string regex = 7;
}

message Geo {
    float lat = 1;
    float lon = 2;
    float alt = 3;
}

message Server {
    string name = 1;
    string host = 2;
}


message NodeType {
    enum Enum {
        DEFAULT = 0;
        PHYSICAL = 1;
        SWITCH = 4;
        HUB = 5;
        WIRELESS_LAN = 6;
        RJ45 = 7;
        TUNNEL = 8;
        EMANE = 10;
        TAP_BRIDGE = 11;
        DOCKER = 15;
        WIRELESS = 17;
        PODMAN = 18;
    }
}

message Position {
    float x = 1;
    float y = 2;
    float z = 3;
}


message ServiceConfig {
    map<string, string> templates = 1;
    map<string, string> config = 2;
}
